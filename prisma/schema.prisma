// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}
// We can use the prize money field to detect an organiser register
model User {
    id           String @id @default(cuid())
    clerkId      String @unique
    email        String @unique
    name         String
    college_name String @default("Individual")

    teamLeader Team[]        @relation("teamLeader")
    invites    InviteToken[]

    teams     Team[]
    regEvents Registration[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Team {
    id          String @id @default(cuid())
    name        String
    prize_money Int    @default(0)
    ranking     Int?
    submissions String // Contains link to location of submission

    leader   User   @relation("teamLeader", fields: [leaderId], references: [id])
    leaderId String

    competition   Competition @relation(fields: [competitionId], references: [id])
    competitionId String

    team_members User[]
    invitations  InviteToken[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([name, competitionId])
}

model InviteToken {
    token     String   @id
    teamId    String
    userId    String
    createdAt DateTime @default(now())

    team Team @relation(fields: [teamId], references: [id])
    user User @relation(fields: [userId], references: [id])

    @@unique([teamId, userId])
}

model Competition {
    id                String @id @default(cuid())
    prizepool         Int    @default(0)
    max_team_size     Int    @default(5)
    min_team_size     Int    @default(1)
    rulebook          String? // Supposed to be a link
    problem_statement String? // Supposed to be a link

    competitionDetails   EventDetails @relation(fields: [competitionDetailsId], references: [id])
    competitionDetailsId String       @unique

    teams Team[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Tag {
    id   String @id @default(cuid())
    name String

    events EventDetails[]
}

model Sponsor {
    id   String @id @default(cuid())
    name String
    tier String
    logo String

    events EventDetails[] // Using this we can get to know what type of event is sposored by the sponsor
}

model EventDetails {
    id          String   @id @default(cuid())
    begin_time  DateTime
    end_time    DateTime
    name        String
    slug        String   @default("")
    description String
    venue       String

    pronite     Pronite?
    competition Competition?
    expos       Expos?
    workshops   Workshops?

    sponsors      Sponsor[]
    regPlans      RegistrationLevel[]
    registrations Registration[]
    tags          Tag[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Registration {
    id        String   @id @default(cuid())
    userId    String
    planId    String
    eventId   String
    paymentId String
    createdAt DateTime @default(now())

    user  User              @relation(fields: [userId], references: [id])
    plan  RegistrationLevel @relation(fields: [planId], references: [id])
    event EventDetails      @relation(fields: [eventId], references: [id])

    @@unique([userId, eventId]) // I had to take eventId here to make sure one user can only register in an event once
}

model RegistrationLevel {
    id          String @id @default(cuid())
    name        String @default("")
    description String @default("")
    price       Int    @default(0)
    labelling   String @default("basic") // Basically to show if the container will be star marked or can have another marking. This can be used to dynamically assign it

    eventDetails   EventDetails @relation(fields: [eventDetailsId], references: [id])
    eventDetailsId String

    Registrations Registration[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Expos {
    id   String @id @default(cuid())

    exposDetails   EventDetails @relation(fields: [exposDetailsId], references: [id])
    exposDetailsId String       @unique

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Workshops {
    id   String @id @default(cuid())

    workshopDetails   EventDetails @relation(fields: [workshopDetailsId], references: [id])
    workshopDetailsId String       @unique

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Pronite {
    id           String @id @default(cuid())
    max_capacity Int    @default(1000)
    ticket_price Int    @default(0)

    proniteDetails   EventDetails @relation(fields: [proniteDetailsId], references: [id])
    proniteDetailsId String       @unique

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
